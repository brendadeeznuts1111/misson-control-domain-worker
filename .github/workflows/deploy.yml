name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Check lock file freshness
        run: |
          npm install --package-lock-only
          git diff --exit-code package-lock.json || (echo "::error::package-lock.json is stale. Run 'npm install' and commit the changes." && exit 1)
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: TypeScript check
        run: npm run typecheck || npx tsc --noEmit

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install SOPS
        run: |
          curl -LO https://github.com/getsops/sops/releases/download/v3.8.1/sops-v3.8.1.linux.amd64
          sudo mv sops-v3.8.1.linux.amd64 /usr/local/bin/sops
          sudo chmod +x /usr/local/bin/sops
      
      - name: Decrypt secrets
        if: ${{ secrets.SOPS_AGE_KEY != '' }}
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}
        run: |
          mkdir -p ~/.config/sops/age
          echo "$SOPS_AGE_KEY" > ~/.config/sops/age/keys.txt
          if [ -f hq/.env.enc ]; then
            sops --decrypt hq/.env.enc > hq/.env
          fi
      
      - name: Deploy to Staging
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env staging
          workingDirectory: ./hq
      
      - name: Clean up secrets
        if: always()
        run: |
          rm -f hq/.env
          rm -f ~/.config/sops/age/keys.txt
      
      - name: Test Staging Deployment
        run: |
          sleep 5
          curl -f https://staging.misson-control.com/health || exit 1
          echo "Staging deployment successful!"

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install SOPS
        run: |
          curl -LO https://github.com/getsops/sops/releases/download/v3.8.1/sops-v3.8.1.linux.amd64
          sudo mv sops-v3.8.1.linux.amd64 /usr/local/bin/sops
          sudo chmod +x /usr/local/bin/sops
      
      - name: Decrypt secrets
        if: ${{ secrets.SOPS_AGE_KEY != '' }}
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}
        run: |
          mkdir -p ~/.config/sops/age
          echo "$SOPS_AGE_KEY" > ~/.config/sops/age/keys.txt
          if [ -f hq/.env.enc ]; then
            sops --decrypt hq/.env.enc > hq/.env
          fi
      
      - name: Deploy to Production
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env production
          workingDirectory: ./hq
      
      - name: Clean up secrets
        if: always()
        run: |
          rm -f hq/.env
          rm -f ~/.config/sops/age/keys.txt
      
      - name: Test Production Deployment
        run: |
          sleep 5
          curl -f https://api.misson-control.com/health || exit 1
          curl -f https://hub.misson-control.com/ || exit 1
          echo "Production deployment successful!"
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}